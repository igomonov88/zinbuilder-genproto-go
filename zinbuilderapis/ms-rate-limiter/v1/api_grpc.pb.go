// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package user

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// RateLimiterClient is the client API for RateLimiter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RateLimiterClient interface {
	Check(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error)
	Watch(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (RateLimiter_WatchClient, error)
	DoesRequestAllowed(ctx context.Context, in *AllowRequest, opts ...grpc.CallOption) (*AllowResponse, error)
}

type rateLimiterClient struct {
	cc grpc.ClientConnInterface
}

func NewRateLimiterClient(cc grpc.ClientConnInterface) RateLimiterClient {
	return &rateLimiterClient{cc}
}

func (c *rateLimiterClient) Check(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (*HealthCheckResponse, error) {
	out := new(HealthCheckResponse)
	err := c.cc.Invoke(ctx, "/ms_rate_limiter.v1.RateLimiter/Check", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rateLimiterClient) Watch(ctx context.Context, in *HealthCheckRequest, opts ...grpc.CallOption) (RateLimiter_WatchClient, error) {
	stream, err := c.cc.NewStream(ctx, &_RateLimiter_serviceDesc.Streams[0], "/ms_rate_limiter.v1.RateLimiter/Watch", opts...)
	if err != nil {
		return nil, err
	}
	x := &rateLimiterWatchClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RateLimiter_WatchClient interface {
	Recv() (*WatchResponse, error)
	grpc.ClientStream
}

type rateLimiterWatchClient struct {
	grpc.ClientStream
}

func (x *rateLimiterWatchClient) Recv() (*WatchResponse, error) {
	m := new(WatchResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *rateLimiterClient) DoesRequestAllowed(ctx context.Context, in *AllowRequest, opts ...grpc.CallOption) (*AllowResponse, error) {
	out := new(AllowResponse)
	err := c.cc.Invoke(ctx, "/ms_rate_limiter.v1.RateLimiter/DoesRequestAllowed", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RateLimiterServer is the server API for RateLimiter service.
// All implementations should embed UnimplementedRateLimiterServer
// for forward compatibility
type RateLimiterServer interface {
	Check(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error)
	Watch(*HealthCheckRequest, RateLimiter_WatchServer) error
	DoesRequestAllowed(context.Context, *AllowRequest) (*AllowResponse, error)
}

// UnimplementedRateLimiterServer should be embedded to have forward compatible implementations.
type UnimplementedRateLimiterServer struct {
}

func (UnimplementedRateLimiterServer) Check(context.Context, *HealthCheckRequest) (*HealthCheckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Check not implemented")
}
func (UnimplementedRateLimiterServer) Watch(*HealthCheckRequest, RateLimiter_WatchServer) error {
	return status.Errorf(codes.Unimplemented, "method Watch not implemented")
}
func (UnimplementedRateLimiterServer) DoesRequestAllowed(context.Context, *AllowRequest) (*AllowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DoesRequestAllowed not implemented")
}

// UnsafeRateLimiterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RateLimiterServer will
// result in compilation errors.
type UnsafeRateLimiterServer interface {
	mustEmbedUnimplementedRateLimiterServer()
}

func RegisterRateLimiterServer(s grpc.ServiceRegistrar, srv RateLimiterServer) {
	s.RegisterService(&_RateLimiter_serviceDesc, srv)
}

func _RateLimiter_Check_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthCheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RateLimiterServer).Check(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ms_rate_limiter.v1.RateLimiter/Check",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RateLimiterServer).Check(ctx, req.(*HealthCheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RateLimiter_Watch_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(HealthCheckRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RateLimiterServer).Watch(m, &rateLimiterWatchServer{stream})
}

type RateLimiter_WatchServer interface {
	Send(*WatchResponse) error
	grpc.ServerStream
}

type rateLimiterWatchServer struct {
	grpc.ServerStream
}

func (x *rateLimiterWatchServer) Send(m *WatchResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _RateLimiter_DoesRequestAllowed_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AllowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RateLimiterServer).DoesRequestAllowed(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ms_rate_limiter.v1.RateLimiter/DoesRequestAllowed",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RateLimiterServer).DoesRequestAllowed(ctx, req.(*AllowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _RateLimiter_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ms_rate_limiter.v1.RateLimiter",
	HandlerType: (*RateLimiterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Check",
			Handler:    _RateLimiter_Check_Handler,
		},
		{
			MethodName: "DoesRequestAllowed",
			Handler:    _RateLimiter_DoesRequestAllowed_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Watch",
			Handler:       _RateLimiter_Watch_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "ms-rate-limiter/v1/api.proto",
}
